@model Umbraco.Web.PublishedContentModels.PagePostCategory

@{
    Layout = "~/Views/Master.cshtml";
}

@{
    var page = Model as PagePostCategory;

    if (page.Children.Any())
    {
        <div class="page-post-category">
            @foreach (var child in Model.Children)
            {
                if (child.IsComposedOf(GeneralPresentation.ModelTypeAlias))
                {
                    var presentationDetails = (IGeneralPresentation)child;

                    if(presentationDetails.PresentationImage != null && presentationDetails.PresentationTitle != null && !String.IsNullOrEmpty(presentationDetails.PresentationTitle.GetValue()))
                    {
                        var isCategory = child.IsDocumentType(PagePostCategory.ModelTypeAlias);

                        bool isReadLater = false;

                        var isReadLaterImgSrc = "/Content/Images/Common Icons/read-later.svg";
                        var isNotReadLaterImgSrc = "/Content/Images/Common Icons/read-later-clock.svg";

                        <div class="col-md-3 col-sm-6 col-xs-12 page-post">
                            <div class="page-post-inner-container">
                                <a href="#" class="suggested-page-btn listing-page" data-action-type="read-later" data-current-state="@isReadLater" data-img-true-src="@isReadLaterImgSrc" data-img-false-src="@isNotReadLaterImgSrc" title="Read Later">
                                    <img src="@(isReadLater ? isReadLaterImgSrc : isNotReadLaterImgSrc)" />
                                </a>

                                <a class="" href="@child.Url">
                                    <div class="page-post-image-container">
                                        <img src="@presentationDetails.PresentationImage.Url" />
                                    </div>

                                    <h4>@presentationDetails.PresentationTitle.GetValue()</h4>

                                    @if (!String.IsNullOrEmpty(presentationDetails.PresentationBody.GetValue()))
                                    {
                                        <span class="page-post-presentation-body">@Html.Raw(presentationDetails.PresentationBody.GetValue())</span>
                                    }

                                    <div class="page-post-stats-container">
                                        <span class="page-post-views glyphicon glyphicon-eye-open">24135</span>
                                        <span class="page-post-comments glyphicon glyphicon-comment">16</span>
                                    </div>
                                </a>

                                @if (!isCategory && child.IsComposedOf(GeneralPageTags.ModelTypeAlias))
                                {
                                    var relations = (IGeneralPageTags)child;
                                    if (relations != null && relations.PageTags != null && relations.PageTags.Any())
                                    {
                                        <div class="page-post-tags">
                                            @foreach (var tag in relations.PageTags)
                                            {
                                                <a class="page-post-tag" href="#">@(((DataTag)tag).Text.GetValue().Replace(" ", "-").ToLower())</a>
                                            }
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    }
                }
            }
        </div>
    }
}
